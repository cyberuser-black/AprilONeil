/home/cyber/CLionProjects/AprilONeil/cmake-build-debug/AprilONeil
[C++] [Engine] Adding parser '../lua/parsers/example_parser.lua'...
[C++] [Engine] Adding rule '../lua/conditions/example_condition.lua' --> '../lua/actions/example_action.lua'...
[C++] [Engine] Running...
[C++] [Engine] Taking snapshots from parsers...
[C++] [ParserWrapper] Invoking '../lua/parsers/example_parser.lua'...
[Lua] [example_parser] running...
[Lua] [cyberlib] running...
[Lua] [cyberlib.print] Cyber!
[Lua] [example_parser.parse] calling rootapi_readfile('dummyfile.txt')...
[C++] [RootAPI] [readfile] reading dummyfile.txt...
[C++] [RootAPI] [readfile] "Kapara!!!"
[Lua] [example_parser.parse] result = "Kapara!!!"
[Lua] [example_parser.parse] returning {"result":"Kapara!!!"}
[C++] [ParserWrapper] Parsed Data = {"result": "Kapara!!!"}
[C++] [Engine] Running _rules...
[C++] [Rule] Evaluating '../lua/conditions/example_condition.lua'...
[Lua] [example_condition] running...
[Lua] [example_condition.evaluate] a = null
[Lua] [example_condition.evaluate] b = {"result": "Kapara!!!"}
[Lua] [example_condition.evaluate] evaluating (null == {"result":"Kapara!!!"}) ?
[Lua] [example_condition.evaluate] returning FALSE!
[C++] [Rule] Result = 0
[C++] [Rule] Condition does NOT hold.
[C++] [Engine] ------------------ delay between snapshots ----------------
[C++] [Engine] Taking snapshots from parsers...
[C++] [ParserWrapper] Invoking '../lua/parsers/example_parser.lua'...
[Lua] [example_parser] running...
[Lua] [cyberlib] running...
[Lua] [cyberlib.print] Cyber!
[Lua] [example_parser.parse] calling rootapi_readfile('dummyfile.txt')...
[C++] [RootAPI] [readfile] reading dummyfile.txt...
[C++] [RootAPI] [readfile] "Kapara!!!"
[Lua] [example_parser.parse] result = "Kapara!!!"
[Lua] [example_parser.parse] returning {"result":"Kapara!!!"}
[C++] [ParserWrapper] Parsed Data = {"result": "Kapara!!!"}
[C++] [Engine] Running _rules...
[C++] [Rule] Evaluating '../lua/conditions/example_condition.lua'...
[Lua] [example_condition] running...
[Lua] [example_condition.evaluate] a = {"result": "Kapara!!!"}
[Lua] [example_condition.evaluate] b = {"result": "Kapara!!!"}
[Lua] [example_condition.evaluate] evaluating ({"result":"Kapara!!!"} == {"result":"Kapara!!!"}) ?
[Lua] [example_condition.evaluate] returning TRUE!
[C++] [Rule] Result = 1
[C++] [Rule] Condition holds! Performing '../lua/actions/example_action.lua'...
[Lua] [example_action] running...
[Lua] [example_action.do_action] DOING ACTION (to save the Kapara!!!)
[C++] [Engine] ------------------ delay between snapshots ----------------
